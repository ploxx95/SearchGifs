{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/GetGif.js","components/GridGift.js","hooks/useFetchGifs.js","App.js","serviceWorker.js","index.js"],"names":["AddCategory","setCategory","category","useState","value","setValue","onSubmit","e","preventDefault","trim","length","className","type","onChange","target","GifGridItem","id","title","url","console","log","src","alt","GetGif","a","encodeURI","fetch","resp","json","data","gif","map","g","images","downsized_medium","GridGift","loading","state","setstate","useEffect","then","setTimeout","useFetchGifs","key","gogo","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qMAEaA,EAAc,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SAAe,EAC9BC,mBAAS,IADqB,mBACjDC,EADiD,KAC1CC,EAD0C,KAaxD,OACE,0BAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAMK,OAAOC,QAAU,IACzBT,EAAY,CAACG,GAAF,mBAAYF,KACvBG,EAAS,OAMT,2BACEM,UAAU,iBACVC,KAAK,OACLR,MAAOA,EACPS,SAjBc,SAACN,GACnBF,EAASE,EAAEO,OAAOV,YCHTW,EAAc,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAEvC,OADAC,QAAQC,IAAI,eAEV,yBAAKT,UAAU,mDACb,2BAAIM,GACJ,yBAAKN,UAAU,WAAWU,IAAKH,EAAKI,IAAKL,M,uBCPlCM,EAAM,uCAAG,WAAOrB,GAAP,uBAAAsB,EAAA,6DACdN,EADc,0FAC2EO,UAC7FvB,GAFkB,qBAIDwB,MAAMR,GAJL,cAIdS,EAJc,gBAKGA,EAAKC,OALR,uBAKZC,EALY,EAKZA,KACFC,EAAMD,EAAKE,KAAI,SAACC,GAAO,IAAD,EAC1B,MAAO,CACLhB,GAAIgB,EAAEhB,GACNC,MAAOe,EAAEf,MACTC,IAAG,UAAEc,EAAEC,cAAJ,aAAE,EAAUC,iBAAiBhB,QAVhB,kBAabY,GAba,4CAAH,sDCINK,G,MAAW,SAAC,GAAkB,IAAhBjC,EAAe,EAAfA,SAAe,ECFd,SAACA,GAAc,IAAD,EACdC,mBAAS,CACjC0B,KAAM,GACNO,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAgBxC,OAVAC,qBAAU,WACRhB,EAAOrB,GAAUsC,MAAK,SAACR,GACrBS,YAAW,WACTH,EAAS,CACPT,KAAMG,EACNI,SAAS,MAEV,UAEJ,CAAClC,IACGmC,EDbmBK,CAAaxC,GAA/BkC,EADgC,EAChCA,QAASP,EADuB,EACvBA,KAMjB,OACE,oCACE,yBAAKlB,UAAU,eACb,wBAAIA,UAAU,yCAAyCT,GACvD,6BACCkC,GAAW,uCAEd,yBAAKzB,UAAU,YACZkB,EAAKE,KAAI,SAACC,GACT,OAAO,kBAAC,EAAD,eAAaW,IAAKX,EAAEhB,IAAQgB,EAA5B,CAA+BY,KAAMZ,EAAEhB,aEhB3C6B,EAAM,WAAO,IAAD,EACS1C,mBAAS,CAAC,UADnB,mBAChBD,EADgB,KACND,EADM,KAQvB,OACE,oCACE,yBAAKU,UAAU,oBACb,+CACA,kBAAC,EAAD,CAAaV,YAAaA,EAAaC,SAAUA,KAEnD,yBAAKS,UAAU,kBACb,4BACGT,EAAS6B,KAAI,SAAC7B,EAAUc,GACvB,OAAO,kBAAC,EAAD,CAAU2B,IAAKzC,EAAUA,SAAUA,WCTlC4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEP,kBAAC,EAAD,MAEAC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,a","file":"static/js/main.f4506169.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport const AddCategory = ({ setCategory, category }) => {\r\n  const [value, setValue] = useState(\"\");\r\n  const handleInput = (e) => {\r\n    setValue(e.target.value);\r\n  };\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (value.trim().length >= 4) {\r\n      setCategory([value, ...category]);\r\n      setValue(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        className=\"input-category\"\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={handleInput}\r\n      ></input>\r\n    </form>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n  console.log(\"ITEMREP----\");\r\n  return (\r\n    <div className=\"grid-item animate__animated animate__fadeInDown\">\r\n      <p>{title}</p>\r\n      <img className=\"gif-item\" src={url} alt={title} />\r\n    </div>\r\n  );\r\n};\r\n","export const GetGif = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?api_key=u2RqAJR2PiSSbjQspxIjAtvycM36BIBW&q=${encodeURI(\r\n    category\r\n  )}&limit=5`;\r\n  const resp = await fetch(url);\r\n  const { data } = await resp.json();\r\n  const gif = data.map((g) => {\r\n    return {\r\n      id: g.id,\r\n      title: g.title,\r\n      url: g.images?.downsized_medium.url,\r\n    };\r\n  });\r\n  return gif;\r\n};\r\n","import React from \"react\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport \"animate.css\";\r\nexport const GridGift = ({ category }) => {\r\n  const { loading, data } = useFetchGifs(category);\r\n\r\n  // useEffect(() => {\r\n  //   GetGif(category).then(setGifs);\r\n  // }, [category]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"section-gif\">\r\n        <h2 className=\"animate__animated animate__fadeInDown\">{category}</h2>\r\n        <hr></hr>\r\n        {loading && <p>Loading</p>}\r\n      </div>\r\n      <div className=\"grid-gif\">\r\n        {data.map((g) => {\r\n          return <GifGridItem key={g.id} {...g} gogo={g.id}></GifGridItem>;\r\n          // <li > {g.title}</li>\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { GetGif } from \"../helpers/GetGif\";\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setstate] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    GetGif(category).then((g) => {\r\n      setTimeout(() => {\r\n        setstate({\r\n          data: g,\r\n          loading: false,\r\n        });\r\n      }, 2000);\r\n    });\r\n  }, [category]);\r\n  return state;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GridGift } from \"./components/GridGift\";\r\n\r\nexport const App = () => {\r\n  const [category, setCategory] = useState([\"Anime\"]);\r\n\r\n  // const handleButtonClick = () => {\r\n  //   setCategory([...category, \"Tralalala\"]);\r\n  //   //setCategory((a) => [...a, \"oooo\"]); //es OTRA MANERA DE CAMBIAR EL USESTATE\r\n  // };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"header-container\">\r\n        <h2>GIFT SEARCH APP</h2>\r\n        <AddCategory setCategory={setCategory} category={category} />\r\n      </div>\r\n      <div className=\"body-container\">\r\n        <ol>\r\n          {category.map((category, id) => {\r\n            return <GridGift key={category} category={category} />;\r\n          })}\r\n        </ol>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}